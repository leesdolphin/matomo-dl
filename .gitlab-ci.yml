stages:
  - build
  - test
  - gitlab-utils
  - release

variables:
  DOCKER_DRIVER: overlay2
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  CI_APPLICATION_TAG: $CI_COMMIT_SHA
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"
  PIPENV_VENV_IN_PROJECT: 1
  PYTHONUNBUFFERED: 1

cache:
  paths:
    - .cache/pip
    - .venv

.python_template: &python_template
  image: python:3.6
  before_script:
    - pip install pipenv
    - pipenv install --dev --deploy --extra-index-url ./wheels
    - pipenv clean
    - pipenv graph
  dependencies:
    - build-wheel

################################# Jobs follow #################################

build-wheel:
  image: python:3.6
  stage: build
  script:
    - python3 setup.py sdist
    - pip wheel --wheel-dir ./wheels .
  artifacts:
    paths:
      - ./wheels

build-docker:
  image: docker:stable
  stage: build
  only:
    - master
    - tags
  services:
    - docker:stable-dind
  variables:
  before_script:
    - apk add -U git
    - docker login -u $CI_DEPLOY_RW_USER -p $CI_DEPLOY_RW_PASSWORD $CI_REGISTRY
    - export PREVIOUS_APPLICATION_TAG=$(git rev-parse HEAD~1) || true
    - docker pull $CI_REGISTRY_IMAGE:master $CI_REGISTRY_IMAGE:latest || true
    - docker pull $CI_APPLICATION_REPOSITORY:$PREVIOUS_APPLICATION_TAG || true
  script:
    - docker build
        --cache-from=$CI_APPLICATION_REPOSITORY:{master,latest,$PREVIOUS_APPLICATION_TAG}
        --tag=$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
        .
    - docker push $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG

mypy:
  <<: *python_template
  stage: test
  script:
    - pipenv run mypy .

black:
  <<: *python_template
  stage: test
  script:
    - pipenv run black --check --diff .

flake8:
  <<: *python_template
  stage: test
  script:
    - pipenv run flake8 .

isort:
  <<: *python_template
  stage: test
  script:
    - pipenv run isort --check-only -r .

pipenv-check:
  <<: *python_template
  stage: test
  script:
    - pipenv check

reproducable-builds:
  <<: *python_template
  stage: test
  script:
    - rm -fr .test-cache tests/reproducable.lock.toml
    - pipenv run matomo-dl --cache=./.test-cache update tests/reproducable.toml
    - cp tests/reproducable.lock.toml .test-cache/
    - pipenv run matomo-dl --cache=./.test-cache build tests/reproducable.toml --output ./.test-cache/reproducable-1.tar.gz
    - pipenv run matomo-dl --cache=./.test-cache build tests/reproducable.toml --output ./.test-cache/reproducable-2.tar.gz
    # Diffoscope is like diff on steroids.
    - pipenv run diffoscope --text-color=always --output-empty ./.test-cache/reproducable-{1,2}.tar.gz
    # Test that it works even without a cache
    - pipenv run matomo-dl --cache-level=none    build tests/reproducable.toml --output ./.test-cache/reproducable-3.tar.gz
    - pipenv run diffoscope --text-color=always --output-empty ./.test-cache/reproducable-{2,3}.tar.gz
  artifacts:
    paths:
      - .test-cache
    expire_in: 1 day


release-docker-master:
  image: docker:stable
  stage: release
  only:
    - master
  services:
    - docker:stable-dind
  before_script:
    - docker login -u $CI_DEPLOY_RW_USER -p $CI_DEPLOY_RW_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
    - docker tag $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG $CI_REGISTRY_IMAGE:master
    - docker push $CI_REGISTRY_IMAGE:master

release-docker-tag:
  image: docker:stable
  stage: release
  only:
    - tags
  services:
    - docker:stable-dind
  before_script:
    - docker login -u $CI_DEPLOY_RW_USER -p $CI_DEPLOY_RW_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
    - docker tag $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker tag $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:latest

release-pypi-master:
  <<: *python_template
  stage: release
  only:
    - master
    - tags
  script:
    - TWINE_USERNAME="${CI_PYPI_USER}" \
      TWINE_PASSWORD="${CI_PYPI_PASSWORD}"\
      TWINE_TEST_PASSWORD="${CI_TEST_PYPI_PASSWORD}"\
      pipenv run python3 support/release.py

pages:
  <<: *python_template
  stage: release
  allow_failure: true
  only:
    - master
  script:
    - pip install sphinx sphinx-rtd-theme
    - cd doc ; make html
    - mv build/html/ ../public/
  artifacts:
    paths:
    - public

##### Some GitLab magic.

container_scanning:
  image: docker:stable
  stage: gitlab-utils
  allow_failure: true
  services:
    - docker:stable-dind
  before_script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
  script:
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true
  artifacts:
    paths: [gl-container-scanning-report.json]
sast:
  image: docker:stable
  stage: gitlab-utils
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  artifacts:
    paths: [gl-sast-report.json]
dependency_scanning:
  image: docker:stable
  stage: gitlab-utils
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]
